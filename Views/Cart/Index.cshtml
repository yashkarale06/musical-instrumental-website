@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="cart-page">
    <h2>Shopping Cart</h2>
    
    @if (ViewBag.CartMessage != null)
    {
        <div class="alert alert-success">
            @ViewBag.CartMessage
        </div>
    }
    
    <div class="cart-content">
        <div class="cart-items" id="cart-items-container">
            <!-- Cart items will be dynamically populated via JavaScript -->
            <div class="loading-cart">Loading your cart...</div>
        </div>
        
        <div class="cart-summary">
            <div class="summary-row">
                <span>Subtotal:</span>
                <span>₹0</span>
            </div>
            <div class="summary-row">
                <span>Shipping:</span>
                <span>₹500</span>
            </div>
            <div class="summary-row">
                <span>Tax (18% GST):</span>
                <span>₹0</span>
            </div>
            <div class="summary-row total">
                <span>Total:</span>
                <span>₹500</span>
            </div>
            
            <a asp-controller="Cart" asp-action="Checkout" class="btn checkout-btn">Proceed to Checkout</a>
            <a asp-controller="Product" asp-action="Index" class="continue-shopping">Continue Shopping</a>
        </div>
    </div>
</div>

<style>
    .cart-page {
        margin-bottom: 2rem;
    }
    
    .cart-page h2 {
        margin-bottom: 1.5rem;
    }
    
    .alert {
        padding: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 4px;
    }
    
    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .cart-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
    }
    
    .cart-items {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 1rem;
        min-height: 200px;
    }
    
    .loading-cart, .empty-cart {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 200px;
        color: #6c757d;
    }
    
    .empty-cart a {
        color: #007bff;
        margin-left: 0.5rem;
    }
    
    .cart-item {
        display: grid;
        grid-template-columns: 80px 3fr 1fr 1fr 1fr 1fr;
        gap: 1rem;
        padding: 1rem 0;
        border-bottom: 1px solid #ddd;
        align-items: center;
    }
    
    .cart-item:last-child {
        border-bottom: none;
    }
    
    .item-image img {
        width: 100%;
        height: 80px;
        object-fit: cover;
        border-radius: 4px;
    }
    
    .item-details h3 {
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }
    
    .item-details p {
        color: #6c757d;
        font-size: 0.9rem;
    }
    
    .item-quantity select {
        width: 60px;
        padding: 0.25rem;
    }
    
    .remove-item {
        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .remove-item:hover {
        background-color: #dc3545;
        color: white;
    }
    
    .cart-summary {
        background-color: #f4f4f4;
        padding: 1.5rem;
        border-radius: 8px;
        align-self: flex-start;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
    }
    
    .summary-row.total {
        font-weight: bold;
        font-size: 1.2rem;
        border-top: 1px solid #ddd;
        padding-top: 1rem;
        margin-top: 1rem;
    }
    
    .checkout-btn {
        display: block;
        width: 100%;
        text-align: center;
        margin-bottom: 1rem;
        padding: 0.75rem;
        background-color: #28a745;
    }
    
    .checkout-btn:hover {
        background-color: #218838;
    }
    
    .continue-shopping {
        display: block;
        text-align: center;
        color: #007bff;
        text-decoration: none;
    }
    
    .continue-shopping:hover {
        text-decoration: underline;
    }
    
    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .cart-content {
            grid-template-columns: 1fr;
        }
        
        .cart-item {
            grid-template-columns: 1fr;
            text-align: center;
        }
        
        .item-image {
            margin: 0 auto;
            width: 100px;
        }
        
        .item-details, .item-price, .item-quantity, .item-total, .item-remove {
            padding: 0.5rem 0;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get cart items container
        const cartItemsContainer = document.getElementById('cart-items-container');
        
        // Get cart items from localStorage
        const savedCart = localStorage.getItem('cart');
        let cartItems = [];
        
        if (savedCart) {
            cartItems = JSON.parse(savedCart);
        }
        
        // If cart is empty, show empty cart message
        if (!cartItems || cartItems.length === 0) {
            cartItemsContainer.innerHTML = '<div class="empty-cart">Your cart is empty. <a href="/Product">Continue shopping</a></div>';
            return;
        }
        
        // Build HTML for cart items
        let cartItemsHTML = '';
        
        cartItems.forEach(item => {
            const itemTotal = item.price * item.quantity;
            
            cartItemsHTML += `
                <div class="cart-item" data-id="${item.productId}">
                    <div class="item-image">
                        <img src="${item.imageUrl || '/images/products/default.jpg'}" alt="${item.name}">
                    </div>
                    <div class="item-details">
                        <h3>${item.name}</h3>
                        <p>Product ID: ${item.productId}</p>
                    </div>
                    <div class="item-price">₹${item.price.toLocaleString('en-IN')}</div>
                    <div class="item-quantity">
                        <select>
                            ${generateQuantityOptions(item.quantity)}
                        </select>
                    </div>
                    <div class="item-total">₹${itemTotal.toLocaleString('en-IN')}</div>
                    <div class="item-remove">
                        <button class="remove-item">Remove</button>
                    </div>
                </div>
            `;
        });
        
        // Update cart items container
        cartItemsContainer.innerHTML = cartItemsHTML;
        
        // Update cart summary
        updateCartSummary();
        
        // Add event handlers for quantity changes and remove buttons
        addCartEventHandlers();
        
        // Function to generate quantity options
        function generateQuantityOptions(selectedQuantity) {
            let options = '';
            for (let i = 1; i <= 10; i++) {
                options += `<option value="${i}" ${i === selectedQuantity ? 'selected' : ''}>${i}</option>`;
            }
            return options;
        }
        
        // Function to update cart summary
        function updateCartSummary() {
            const cartSubtotalElement = document.querySelector('.summary-row:nth-child(1) span:last-child');
            const cartTaxElement = document.querySelector('.summary-row:nth-child(3) span:last-child');
            const cartTotalElement = document.querySelector('.summary-row.total span:last-child');
            
            if (cartSubtotalElement && cartTaxElement && cartTotalElement) {
                // Calculate subtotal
                const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
                const tax = subtotal * 0.18; // 18% GST
                const total = subtotal + tax + 500; // Adding fixed shipping of ₹500
                
                cartSubtotalElement.textContent = `₹${subtotal.toLocaleString('en-IN')}`;
                cartTaxElement.textContent = `₹${tax.toLocaleString('en-IN')}`;
                cartTotalElement.textContent = `₹${total.toLocaleString('en-IN')}`;
            }
        }
        
        // Function to add event handlers for cart items
        function addCartEventHandlers() {
            // Handle quantity changes
            const quantitySelects = document.querySelectorAll('.item-quantity select');
            if (quantitySelects) {
                quantitySelects.forEach(select => {
                    select.addEventListener('change', function() {
                        const cartItem = this.closest('.cart-item');
                        if (cartItem) {
                            const productId = parseInt(cartItem.getAttribute('data-id'), 10);
                            const quantity = parseInt(this.value, 10);
                            
                            // Update cart item quantity
                            const itemIndex = cartItems.findIndex(item => item.productId === productId);
                            if (itemIndex >= 0) {
                                cartItems[itemIndex].quantity = quantity;
                                
                                // Update local storage
                                localStorage.setItem('cart', JSON.stringify(cartItems));
                                
                                // Update cart count in header
                                updateCartCount();
                                
                                // Update item total
                                const priceElement = cartItem.querySelector('.item-price');
                                const totalElement = cartItem.querySelector('.item-total');
                                
                                if (priceElement && totalElement) {
                                    const priceText = priceElement.textContent.replace('₹', '').replace(/,/g, '');
                                    const price = parseFloat(priceText);
                                    const total = price * quantity;
                                    
                                    totalElement.textContent = `₹${total.toLocaleString('en-IN')}`;
                                }
                                
                                // Update cart summary
                                updateCartSummary();
                            }
                        }
                    });
                });
            }
            
            // Handle remove buttons
            const removeButtons = document.querySelectorAll('.remove-item');
            if (removeButtons) {
                removeButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const cartItem = this.closest('.cart-item');
                        if (cartItem) {
                            const productId = parseInt(cartItem.getAttribute('data-id'), 10);
                            
                            // Remove item from cart
                            cartItems = cartItems.filter(item => item.productId !== productId);
                            
                            // Update local storage
                            localStorage.setItem('cart', JSON.stringify(cartItems));
                            
                            // Update cart count in header
                            updateCartCount();
                            
                            // Remove item from DOM
                            cartItem.remove();
                            
                            // Update cart summary
                            updateCartSummary();
                            
                            // If cart is empty, show empty cart message
                            if (cartItems.length === 0) {
                                cartItemsContainer.innerHTML = '<div class="empty-cart">Your cart is empty. <a href="/Product">Continue shopping</a></div>';
                            }
                        }
                    });
                });
            }
        }
        
        // Function to update cart count in header
        function updateCartCount() {
            const cartCountElement = document.getElementById('cart-count');
            if (cartCountElement) {
                const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0);
                cartCountElement.textContent = itemCount;
            }
        }
    });
</script>